{"remainingRequest":"/goinfre/nderek/matcha_private/front/node_modules/babel-loader/lib/index.js!/goinfre/nderek/matcha_private/front/src/store/index.js","dependencies":[{"path":"/goinfre/nderek/matcha_private/front/src/store/index.js","mtime":1605306440451},{"path":"/goinfre/nderek/matcha_private/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/goinfre/nderek/matcha_private/front/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2giOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvZ29pbmZyZS9uZGVyZWsvbWF0Y2hhX3ByaXZhdGUvZnJvbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAiL2dvaW5mcmUvbmRlcmVrL21hdGNoYV9wcml2YXRlL2Zyb250L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5IjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL2dvaW5mcmUvbmRlcmVrL21hdGNoYV9wcml2YXRlL2Zyb250L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IFZ1ZSBmcm9tICJ2dWUiOwppbXBvcnQgXyBmcm9tICJsb2Rhc2giOwppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiOwppbXBvcnQgZGlmZiBmcm9tICJkZWVwLWRpZmYiOwpleHBvcnQgdmFyIHN0YXRlID0gVnVlLm9ic2VydmFibGUoewogIG5vdGlmaWNhdGlvbnM6IFtdLAogIG9ubGluZV91c2VyczogW10sCiAgbWVzc2FnZXM6IFtdLAogIG1lc3NhZ2luZ191c2VyOiBudWxsLAogIG1hcHNLZXk6IG51bGwsCiAgaXBzdGFja0tleTogbnVsbCwKICB1c2VyOiB7fSwKICBsb2dnZWRJbjogZmFsc2UsCiAgand0OiBudWxsCn0pOwpheGlvcy5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoZnVuY3Rpb24gKGNvbmZpZykgewogIGlmIChzdGF0ZS5qd3QgJiYgfmNvbmZpZy51cmwuaW5kZXhPZihhY3Rpb25zLmFwaSkpIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSAiQmVhcmVyICIuY29uY2F0KHN0YXRlLmp3dCk7CiAgcmV0dXJuIGNvbmZpZzsKfSk7CmV4cG9ydCB2YXIgc29ja2V0ID0gewogIHdzOiBudWxsLAogIGNvbm5lY3Q6IGZ1bmN0aW9uIGNvbm5lY3Qoc29ja2V0VXJpKSB7CiAgICBzb2NrZXQud3MgPSBuZXcgV2ViU29ja2V0KHNvY2tldFVyaSk7CiAgICBzb2NrZXQud3Mub25vcGVuID0gbnVsbDsKCiAgICBzb2NrZXQud3Mub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIHRyeSB7CiAgICAgICAgdmFyIHBheWxvYWQgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpOwogICAgICAgIHNvY2tldC5yb3V0ZXIocGF5bG9hZCk7CiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fQogICAgfTsKICB9LAogIHBhY2thZ2VSZXNwb25zZTogZnVuY3Rpb24gcGFja2FnZVJlc3BvbnNlKG1ldGhvZCwgY29udGVudCkgewogICAgaWYgKHN0YXRlLmp3dCkgewogICAgICByZXR1cm4gewogICAgICAgIGp3dDogc3RhdGUuand0LAogICAgICAgIG1ldGhvZDogbWV0aG9kLAogICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQKICAgICAgfTsKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9LAogIHNlbmQ6IGZ1bmN0aW9uIHNlbmQocGF5bG9hZCkgewogICAgaWYgKHBheWxvYWQuand0KSB7CiAgICAgIHNvY2tldC53YWl0Rm9yUmVhZHlTdGF0ZShzb2NrZXQud3MsIGZ1bmN0aW9uICgpIHsKICAgICAgICBzb2NrZXQud3Muc2VuZChKU09OLnN0cmluZ2lmeShwYXlsb2FkKSk7CiAgICAgIH0pOwogICAgfQogIH0sCiAgd2FpdEZvclJlYWR5U3RhdGU6IGZ1bmN0aW9uIHdhaXRGb3JSZWFkeVN0YXRlKHNvY2tldCwgY2FsbGJhY2spIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICBpZiAoc29ja2V0LnJlYWR5U3RhdGUgPT09IDEpIHsKICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7ZWxzZSB7CiAgICAgICAgICBzb2NrZXQud2FpdEZvclJlYWR5U3RhdGUoc29ja2V0LCBjYWxsYmFjayk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCAxMDApOwogIH0sCiAgc2V0T25saW5lVXNlcnM6IGZ1bmN0aW9uIHNldE9ubGluZVVzZXJzKHVzZXJzKSB7CiAgICBzdGF0ZS5vbmxpbmVfdXNlcnMgPSB1c2VyczsKICB9LAogIHNldE1lc3NhZ2VzOiBmdW5jdGlvbiBzZXRNZXNzYWdlcyhjb250ZW50KSB7CiAgICBpZiAoY29udGVudC5tZXNzYWdlcykgc3RhdGUubWVzc2FnZXMgPSBjb250ZW50Lm1lc3NhZ2VzOwogIH0sCiAgcmVmcmVzaE1lc3NhZ2VzOiBmdW5jdGlvbiByZWZyZXNoTWVzc2FnZXMoKSB7CiAgICBpZiAoc3RhdGUubWVzc2FnaW5nX3VzZXIpIHNvY2tldC5jYWxsLmdldE1lc3NhZ2VzKHN0YXRlLm1lc3NhZ2luZ191c2VyKTsKICB9LAogIGNhbGw6IHsKICAgIHNlbmRNZXNzYWdlVG86IGZ1bmN0aW9uIHNlbmRNZXNzYWdlVG8odXNlcm5hbWUsIG1lc3NhZ2UpIHsKICAgICAgdmFyIHBheWxvYWQgPSBzb2NrZXQucGFja2FnZVJlc3BvbnNlKCJtZXNzYWdlIiwgewogICAgICAgIHRvOiB1c2VybmFtZSwKICAgICAgICBtZXNzYWdlOiBtZXNzYWdlCiAgICAgIH0pOwogICAgICBzb2NrZXQuc2VuZChwYXlsb2FkKTsKICAgIH0sCiAgICBmZXRjaE9ubGluZVVzZXJzOiBmdW5jdGlvbiBmZXRjaE9ubGluZVVzZXJzKCkgewogICAgICB2YXIgcGF5bG9hZCA9IHNvY2tldC5wYWNrYWdlUmVzcG9uc2UoInBvbGxPbmxpbmUiKTsKICAgICAgc29ja2V0LnNlbmQocGF5bG9hZCk7CiAgICB9LAogICAgZ2V0TWVzc2FnZXM6IGZ1bmN0aW9uIGdldE1lc3NhZ2VzKHVzZXJuYW1lKSB7CiAgICAgIHZhciBwYXlsb2FkID0gc29ja2V0LnBhY2thZ2VSZXNwb25zZSgiZ2V0TWVzc2FnZXNGb3IiLCB7CiAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lCiAgICAgIH0pOwogICAgICBzb2NrZXQuc2VuZChwYXlsb2FkKTsKICAgIH0sCiAgICBpbml0aWF0ZUNoYXQ6IGZ1bmN0aW9uIGluaXRpYXRlQ2hhdCh1c2VybmFtZSkgewogICAgICBzdGF0ZS5tZXNzYWdpbmdfdXNlciA9IHVzZXJuYW1lOwogICAgICB2YXIgcGF5bG9hZCA9IHNvY2tldC5wYWNrYWdlUmVzcG9uc2UoImluaXRDaGF0IiwgewogICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZQogICAgICB9KTsKICAgICAgc29ja2V0LnNlbmQocGF5bG9hZCk7CiAgICAgIHNvY2tldC5jYWxsLmdldE1lc3NhZ2VzKHVzZXJuYW1lKTsKICAgIH0sCiAgICBjbG9zZUNoYXQ6IGZ1bmN0aW9uIGNsb3NlQ2hhdCgpIHsKICAgICAgc3RhdGUubWVzc2FnaW5nX3VzZXIgPSBudWxsOwogICAgICBzdGF0ZS5tZXNzYWdlcyA9IFtdOwogICAgfSwKICAgIHJlZ2lzdGVyOiBmdW5jdGlvbiByZWdpc3RlcigpIHsKICAgICAgdmFyIHBheWxvYWQgPSBzb2NrZXQucGFja2FnZVJlc3BvbnNlKCJyZWdpc3RlciIpOwogICAgICBzb2NrZXQuc2VuZChwYXlsb2FkKTsKICAgIH0KICB9LAogIHJvdXRlcjogZnVuY3Rpb24gcm91dGVyKHBheWxvYWQpIHsKICAgIHZhciBtZXRob2QgPSBwYXlsb2FkLm1ldGhvZDsKICAgIHZhciBjb250ZW50ID0gcGF5bG9hZC5jb250ZW50OwoKICAgIGlmIChtZXRob2QpIHsKICAgICAgaWYgKG1ldGhvZCA9PT0gInBvbGxPbmxpbmVSZXF1ZXN0IikgewogICAgICAgIHNvY2tldC5jYWxsLmZldGNoT25saW5lVXNlcnMoKTsKICAgICAgfQoKICAgICAgaWYgKG1ldGhvZCA9PT0gInBvbGxPbmxpbmVSZXNwb25zZSIpIHsKICAgICAgICBzb2NrZXQuc2V0T25saW5lVXNlcnMoY29udGVudCk7CiAgICAgIH0KCiAgICAgIGlmIChtZXRob2QgPT0gInJlY2VpdmVNZXNzYWdlc0Zyb20iKSB7CiAgICAgICAgc29ja2V0LnNldE1lc3NhZ2VzKGNvbnRlbnQpOwogICAgICB9CgogICAgICBpZiAobWV0aG9kID09ICJyZWZyZXNoTWVzc2FnZXMiICYmIHN0YXRlLm1lc3NhZ2luZ191c2VyKSB7CiAgICAgICAgc29ja2V0LmNhbGwuZ2V0TWVzc2FnZXMoc3RhdGUubWVzc2FnaW5nX3VzZXIpOwogICAgICB9CiAgICB9CiAgfQp9OwpleHBvcnQgdmFyIGFjdGlvbnMgPSB7CiAgdnVlOiBudWxsLAogIGFwaTogIiIsCiAgdG9hc3REZWZhdWx0czogewogICAgYXV0b0hpZGVEZWxheTogMjAwMCwKICAgIHRvYXN0ZXI6ICJiLXRvYXN0ZXItdG9wLWNlbnRlciIsCiAgICB2YXJpYW50OiAiaW5mbyIsCiAgICBub0Nsb3NlQnV0dG9uOiB0cnVlCiAgfSwKICBjbGVhck1lc3NhZ2VTdG9yZTogZnVuY3Rpb24gY2xlYXJNZXNzYWdlU3RvcmUoKSB7CiAgICBzdGF0ZS5tZXNzYWdlcyA9IFtdOwogICAgc3RhdGUubWVzc2FnaW5nX3VzZXIgPSBudWxsOwogIH0sCiAgc2V0VnVlOiBmdW5jdGlvbiBzZXRWdWUodnVlSW5zdGFuY2UpIHsKICAgIHJldHVybiBhY3Rpb25zLnZ1ZSA9IHZ1ZUluc3RhbmNlOwogIH0sCiAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgdmFyIF9pbml0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGFwaV91cmwpIHsKICAgICAgdmFyIHVzZXI7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBhY3Rpb25zLmFwaSA9IGFwaV91cmw7CiAgICAgICAgICAgICAgc3RhdGUuand0ID0gYWN0aW9ucy5sb2FkTG9jYWxTdG9hZ2UoKTsKCiAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5qd3QpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gYWN0aW9ucy5nZXRVc2VyKCk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgdXNlciA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgYWN0aW9ucy5zZXRVc2VyKHN0YXRlLmp3dCwgdXNlcik7CgogICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpOwoKICAgIGZ1bmN0aW9uIGluaXQoX3gpIHsKICAgICAgcmV0dXJuIF9pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgcmV0dXJuIGluaXQ7CiAgfSgpLAogIGxvZ291dFVzZXI6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBfbG9nb3V0VXNlciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgc3RhdGUubG9nZ2VkSW4gPSBmYWxzZTsKICAgICAgICAgICAgICBzdGF0ZS51c2VyID0ge307CiAgICAgICAgICAgICAgc3RhdGUuand0ID0gbnVsbDsKICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgibWF0Y2hhLWZpcmV3b29kIik7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSk7CgogICAgZnVuY3Rpb24gbG9nb3V0VXNlcigpIHsKICAgICAgcmV0dXJuIF9sb2dvdXRVc2VyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgcmV0dXJuIGxvZ291dFVzZXI7CiAgfSgpLAogIGxvZ2luVXNlcjogZnVuY3Rpb24gKCkgewogICAgdmFyIF9sb2dpblVzZXIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKHVzZXJuYW1lLCBwYXNzd29yZCkgewogICAgICB2YXIgcmVzcG9uc2UsIGp3dCwgdXNlcjsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDA7CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KCIiLmNvbmNhdChhY3Rpb25zLmFwaSwgIi9sb2dpbiIpLCB7CiAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlcm5hbWUsCiAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0My5zZW50OwogICAgICAgICAgICAgIGp3dCA9IHJlc3BvbnNlLmRhdGEuYWNjZXNzX3Rva2VuOwogICAgICAgICAgICAgIHVzZXIgPSByZXNwb25zZS5kYXRhLnVzZXI7CiAgICAgICAgICAgICAgYWN0aW9ucy5zZXRVc2VyKGp3dCwgdXNlcik7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHRydWUpOwoKICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICBfY29udGV4dDMucHJldiA9IDEwOwogICAgICAgICAgICAgIF9jb250ZXh0My50MCA9IF9jb250ZXh0M1siY2F0Y2giXSgwKTsKICAgICAgICAgICAgICBhY3Rpb25zLm5vdGlmeS5lcnJvcihfY29udGV4dDMudDAucmVzcG9uc2UuZGF0YS5tZXNzYWdlKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgZmFsc2UpOwoKICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzLCBudWxsLCBbWzAsIDEwXV0pOwogICAgfSkpOwoKICAgIGZ1bmN0aW9uIGxvZ2luVXNlcihfeDIsIF94MykgewogICAgICByZXR1cm4gX2xvZ2luVXNlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICAgIHJldHVybiBsb2dpblVzZXI7CiAgfSgpLAogIGdldFVzZXI6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBfZ2V0VXNlciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgIHZhciByZXNwOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMDsKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgiIi5jb25jYXQoYWN0aW9ucy5hcGksICIvdXNlci9jdXJyZW50IikpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJlc3AgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgcmVzcC5kYXRhKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dDQucHJldiA9IDc7CiAgICAgICAgICAgICAgX2NvbnRleHQ0LnQwID0gX2NvbnRleHQ0WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgIGlmIChhY3Rpb25zLnZ1ZSkgYWN0aW9ucy5ub3RpZnkuZXJyb3IoIkNvdWxkIG5vdCByZXRyaWV2ZSB1c2VyIGluZm9ybWF0aW9uIik7ZWxzZSB7CiAgICAgICAgICAgICAgICBhY3Rpb25zLm5vdGlmeS5lcnJvcigiVGhlcmUgd2FzIGEgcHJvYmxlbSBsb2FkaW5nIHNvbWUgZGF0YS4gTm90aWNlIG9mIHRoaXMgZXJyb3IgaGFzIGJlZW4gc2VudCB0byBhZG1pbnMuIik7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuYWJydXB0KCJyZXR1cm4iLCBmYWxzZSk7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTQsIG51bGwsIFtbMCwgN11dKTsKICAgIH0pKTsKCiAgICBmdW5jdGlvbiBnZXRVc2VyKCkgewogICAgICByZXR1cm4gX2dldFVzZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICByZXR1cm4gZ2V0VXNlcjsKICB9KCksCiAgc2V0VXNlcjogZnVuY3Rpb24gc2V0VXNlcihqd3QsIHVzZXIpIHsKICAgIHN0YXRlLmp3dCA9IGp3dDsKICAgIHN0YXRlLnVzZXIgPSB1c2VyOwogICAgc3RhdGUubG9nZ2VkSW4gPSB0cnVlOwogICAgYWN0aW9ucy5zYXZlTG9jYWxTdG9hZ2UoKTsKICAgIGFjdGlvbnMuZ2V0QXBpS2V5cygpOyAvLyBzb2NrZXQuY2FsbC5yZWdpc3RlcigpCiAgfSwKICBzbmFwc2hvdFVzZXI6IGZ1bmN0aW9uIHNuYXBzaG90VXNlcigpIHsKICAgIHJldHVybiBfLmNsb25lRGVlcChzdGF0ZS51c2VyKTsKICB9LAogIGdldFVzZXJNYXRjaGVzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX2dldFVzZXJNYXRjaGVzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgdmFyIHJlc3A7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNSQoX2NvbnRleHQ1KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQ1LnByZXYgPSAwOwogICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KCIiLmNvbmNhdChhY3Rpb25zLmFwaSwgIi9tYXRjaGVzIikpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJlc3AgPSBfY29udGV4dDUuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgcmVzcC5kYXRhKTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBfY29udGV4dDUucHJldiA9IDc7CiAgICAgICAgICAgICAgX2NvbnRleHQ1LnQwID0gX2NvbnRleHQ1WyJjYXRjaCJdKDApOwoKICAgICAgICAgICAgICBpZiAoX2NvbnRleHQ1LnQwLnJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBhY3Rpb25zLm5vdGlmeS5lcnJvcihfY29udGV4dDUudDAucmVzcG9uc2UubWVzc2FnZSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LmFicnVwdCgicmV0dXJuIiwgW10pOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWU1LCBudWxsLCBbWzAsIDddXSk7CiAgICB9KSk7CgogICAgZnVuY3Rpb24gZ2V0VXNlck1hdGNoZXMoKSB7CiAgICAgIHJldHVybiBfZ2V0VXNlck1hdGNoZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICByZXR1cm4gZ2V0VXNlck1hdGNoZXM7CiAgfSgpLAogIC8vIENvbXBhcmUgdGhlIHVzZXJzIGFuZCBzYXZlIHdoYXRzIGRpZmZlcmVudCEKICBzeW5jVXNlcjogZnVuY3Rpb24gKCkgewogICAgdmFyIF9zeW5jVXNlciA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYodXNlcikgewogICAgICB2YXIgY2hhbmdlcywgcmVzcCwgX2ksIF9PYmplY3QkZW50cmllcywgX09iamVjdCRlbnRyaWVzJF9pLCBrZXksIHZhbHVlOwoKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjaGFuZ2VzID0ge307CiAgICAgICAgICAgICAgQXJyYXkuZnJvbShkaWZmKHN0YXRlLnVzZXIsIHVzZXIpIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBkLnBhdGhbMF07CiAgICAgICAgICAgICAgICBjaGFuZ2VzW2luZGV4XSA9IHVzZXJbaW5kZXhdOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBpZiAoIShPYmplY3Qua2V5cyhjaGFuZ2VzKS5sZW5ndGggPiAwKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAxNTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQ2LnByZXYgPSAzOwogICAgICAgICAgICAgIF9jb250ZXh0Ni5uZXh0ID0gNjsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucHV0KCIiLmNvbmNhdChhY3Rpb25zLmFwaSwgIi91c2VyLyIpLmNvbmNhdCh1c2VyLmlkKSwgewogICAgICAgICAgICAgICAgdXNlcjogY2hhbmdlcwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIHJlc3AgPSBfY29udGV4dDYuc2VudDsKCiAgICAgICAgICAgICAgLy8gQXBwbHkgc3luY2VkIGNoYW5nZXMgdG8gdGhlIHN0YXRlIHVzZXIgb2JqZWN0CiAgICAgICAgICAgICAgZm9yIChfaSA9IDAsIF9PYmplY3QkZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGNoYW5nZXMpOyBfaSA8IF9PYmplY3QkZW50cmllcy5sZW5ndGg7IF9pKyspIHsKICAgICAgICAgICAgICAgIF9PYmplY3QkZW50cmllcyRfaSA9IF9zbGljZWRUb0FycmF5KF9PYmplY3QkZW50cmllc1tfaV0sIDIpLCBrZXkgPSBfT2JqZWN0JGVudHJpZXMkX2lbMF0sIHZhbHVlID0gX09iamVjdCRlbnRyaWVzJF9pWzFdOwogICAgICAgICAgICAgICAgc3RhdGUudXNlcltrZXldID0gdmFsdWU7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ2LmFicnVwdCgicmV0dXJuIiwgdHJ1ZSk7CgogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIF9jb250ZXh0Ni5wcmV2ID0gMTE7CiAgICAgICAgICAgICAgX2NvbnRleHQ2LnQwID0gX2NvbnRleHQ2WyJjYXRjaCJdKDMpOwogICAgICAgICAgICAgIGFjdGlvbnMubm90aWZ5LmVycm9yKF9jb250ZXh0Ni50MC5yZXNwb25zZS5kYXRhLm1lc3NhZ2UpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCBmYWxzZSk7CgogICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTYsIG51bGwsIFtbMywgMTFdXSk7CiAgICB9KSk7CgogICAgZnVuY3Rpb24gc3luY1VzZXIoX3g0KSB7CiAgICAgIHJldHVybiBfc3luY1VzZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICByZXR1cm4gc3luY1VzZXI7CiAgfSgpLAogIGxvYWRMb2NhbFN0b2FnZTogZnVuY3Rpb24gbG9hZExvY2FsU3RvYWdlKCkgewogICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCJtYXRjaGEtZmlyZXdvb2QiKTsKICB9LAogIHNhdmVMb2NhbFN0b2FnZTogZnVuY3Rpb24gc2F2ZUxvY2FsU3RvYWdlKCkgewogICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCJtYXRjaGEtZmlyZXdvb2QiLCBzdGF0ZS5qd3QpOwogIH0sCiAgbm90aWZ5OiB7CiAgICBzZXRPcHRzOiBmdW5jdGlvbiBzZXRPcHRzKG9wdGlvbnMpIHsKICAgICAgcmV0dXJuIG9wdGlvbnMgPyBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGFjdGlvbnMudG9hc3REZWZhdWx0cyksIG9wdGlvbnMpIDogYWN0aW9ucy50b2FzdERlZmF1bHRzOwogICAgfSwKICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIHN1Y2Nlc3MobWVzc2FnZSwgb3B0aW9ucykgewogICAgICB2YXIgb3B0ID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBhY3Rpb25zLm5vdGlmeS5zZXRPcHRzKG9wdGlvbnMpKSwge30sIHsKICAgICAgICB0aXRsZTogIlN1Y2Nlc3MhIiwKICAgICAgICB2YXJpYW50OiAic3VjY2VzcyIsCiAgICAgICAgbm9DbG9zZUJ1dHRvbjogZmFsc2UKICAgICAgfSk7CgogICAgICBhY3Rpb25zLnZ1ZS4kYnZUb2FzdC50b2FzdChtZXNzYWdlLCBvcHQpOwogICAgfSwKICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihtZXNzYWdlLCBvcHRpb25zKSB7CiAgICAgIHZhciBvcHQgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGFjdGlvbnMubm90aWZ5LnNldE9wdHMob3B0aW9ucykpLCB7fSwgewogICAgICAgIHRpdGxlOiAiRXJyb3IhIiwKICAgICAgICB2YXJpYW50OiAiZGFuZ2VyIiwKICAgICAgICBub0Nsb3NlQnV0dG9uOiBmYWxzZQogICAgICB9KTsKCiAgICAgIGFjdGlvbnMudnVlLiRidlRvYXN0LnRvYXN0KG1lc3NhZ2UsIG9wdCk7CiAgICB9LAogICAgd2FybmluZzogZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlLCBvcHRpb25zKSB7CiAgICAgIHZhciBvcHQgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGFjdGlvbnMubm90aWZ5LnNldE9wdHMob3B0aW9ucykpLCB7fSwgewogICAgICAgIHRpdGxlOiAiUGxlYXNlIE5vdGUhIiwKICAgICAgICB2YXJpYW50OiAid2FybmluZyIsCiAgICAgICAgbm9DbG9zZUJ1dHRvbjogZmFsc2UKICAgICAgfSk7CgogICAgICBhY3Rpb25zLnZ1ZS4kYnZUb2FzdC50b2FzdChtZXNzYWdlLCBvcHQpOwogICAgfSwKICAgIGluZm86IGZ1bmN0aW9uIGluZm8obWVzc2FnZSwgb3B0aW9ucykgewogICAgICB2YXIgb3B0ID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBhY3Rpb25zLm5vdGlmeS5zZXRPcHRzKG9wdGlvbnMpKSwge30sIHsKICAgICAgICB0aXRsZTogIlBsZWFzZSBOb3RlIiwKICAgICAgICB2YXJpYW50OiAiaW5mbyIsCiAgICAgICAgbm9DbG9zZUJ1dHRvbjogZmFsc2UKICAgICAgfSk7CgogICAgICBhY3Rpb25zLnZ1ZS4kYnZUb2FzdC50b2FzdChtZXNzYWdlLCBvcHQpOwogICAgfQogIH0sCiAgbG9jYXRpb246IHsKICAgIGlwOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfaXAgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkgewogICAgICAgIHZhciByZXNwLCBsYXQsIGxvbmc7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5wcmV2ID0gMDsKICAgICAgICAgICAgICAgIHJlc3AgPSBheGlvcy5nZXQoIiIuY29uY2F0KGFjdGlvbnMuYXBpLCAiL2xvY2F0aW9uIikpOwogICAgICAgICAgICAgICAgbGF0ID0gcmVzcC5kYXRhLmxhdGl0dWRlIHx8IC0yOS43NjQyNjk7CiAgICAgICAgICAgICAgICBsb25nID0gcmVzcC5kYXRhLmxvbmdpdHVkZSB8fCAyNS40Mjk3OTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIGxhdDogbGF0LAogICAgICAgICAgICAgICAgICBsb25nOiBsb25nCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgX2NvbnRleHQ3LnByZXYgPSA3OwogICAgICAgICAgICAgICAgX2NvbnRleHQ3LnQwID0gX2NvbnRleHQ3WyJjYXRjaCJdKDApOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgbGF0OiAtMjkuNzY0MjY5LAogICAgICAgICAgICAgICAgICBsb25nOiAyNS40Mjk3OQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTcsIG51bGwsIFtbMCwgN11dKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gaXAoKSB7CiAgICAgICAgcmV0dXJuIF9pcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gaXA7CiAgICB9KCksCiAgICBnZXRCcm93c2VyUG9zaXRpb246IGZ1bmN0aW9uIGdldEJyb3dzZXJQb3NpdGlvbigpIHsKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKHJlc29sdmUsIHJlamVjdCk7CiAgICAgIH0pOwogICAgfSwKICAgIGJyb3dzZXI6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9icm93c2VyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlOCgpIHsKICAgICAgICB2YXIgcG9zOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlOCQoX2NvbnRleHQ4KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoIW5hdmlnYXRvci5nZW9sb2NhdGlvbikgewogICAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0OC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb25zLmxvY2F0aW9uLmdldEJyb3dzZXJQb3NpdGlvbigpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBwb3MgPSBfY29udGV4dDguc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDguYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIGxhdDogcG9zLmNvb3Jkcy5sYXRpdHVkZSwKICAgICAgICAgICAgICAgICAgbG9uZzogcG9zLmNvb3Jkcy5sb25naXR1ZGUKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICBsYXQ6IC0yOS43NjQyNjksCiAgICAgICAgICAgICAgICAgIGxvbmc6IDI1LjQyOTc5CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU4KTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gYnJvd3NlcigpIHsKICAgICAgICByZXR1cm4gX2Jyb3dzZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGJyb3dzZXI7CiAgICB9KCksCiAgICBuYW1lOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfbmFtZSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkocG9zKSB7CiAgICAgICAgdmFyIHVybCwgcmVzcCwgZjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKHN0YXRlLm1hcHNLZXkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ5LmFicnVwdCgicmV0dXJuIiwgbnVsbCk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHVybCA9ICJodHRwczovL21hcHMuZ29vZ2xlYXBpcy5jb20vbWFwcy9hcGkvZ2VvY29kZS9qc29uP2xhdGxuZz0iLmNvbmNhdChwb3MubGF0LCAiLCIpLmNvbmNhdChwb3MubG9uZywgIiZrZXk9IikuY29uY2F0KHN0YXRlLm1hcHNLZXkpOwogICAgICAgICAgICAgICAgX2NvbnRleHQ5LnByZXYgPSAzOwogICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCh1cmwpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICByZXNwID0gX2NvbnRleHQ5LnNlbnQ7CgogICAgICAgICAgICAgICAgaWYgKCFyZXNwLmRhdGEucmVzdWx0cykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDE4OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmID0gcmVzcC5kYXRhLnJlc3VsdHNbMF1bImFkZHJlc3NfY29tcG9uZW50cyJdOwoKICAgICAgICAgICAgICAgIGlmICghKGZbMl0gJiYgZls2XSkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5hYnJ1cHQoInJldHVybiIsICIiLmNvbmNhdChmWzJdWyJsb25nX25hbWUiXSwgIiwgIikuY29uY2F0KGZbNl1bImxvbmdfbmFtZSJdKSk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICBpZiAoIShmWzBdWyJsb25nX25hbWUiXSA9PSAiVW5uYW1lZCBSb2FkIikpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ5Lm5leHQgPSAxNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5hYnJ1cHQoInJldHVybiIsICIiLmNvbmNhdChmWzFdWyJsb25nX25hbWUiXSkpOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OS5hYnJ1cHQoInJldHVybiIsICIiLmNvbmNhdChmWzBdWyJsb25nX25hbWUiXSkpOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbigpOwoKICAgICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgICAgX2NvbnRleHQ5LnByZXYgPSAyMTsKICAgICAgICAgICAgICAgIF9jb250ZXh0OS50MCA9IF9jb250ZXh0OVsiY2F0Y2giXSgzKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuYWJydXB0KCJyZXR1cm4iLCAiTm8gbG9jYXRpb24gZGF0YSBhdmFpbGFibGUuIik7CgogICAgICAgICAgICAgIGNhc2UgMjQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTksIG51bGwsIFtbMywgMjFdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIG5hbWUoX3g1KSB7CiAgICAgICAgcmV0dXJuIF9uYW1lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBuYW1lOwogICAgfSgpCiAgfSwKICBnZXRBcGlLZXlzOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX2dldEFwaUtleXMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMCgpIHsKICAgICAgdmFyIHJlc3A7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTAkKF9jb250ZXh0MTApIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDEwLnByZXYgPSBfY29udGV4dDEwLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGlmICghKHN0YXRlLm1hcHNLZXkgJiYgc3RhdGUuaXBzdGFja0tleSkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0MTAubmV4dCA9IDI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLmFicnVwdCgicmV0dXJuIiwgdHJ1ZSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgX2NvbnRleHQxMC5wcmV2ID0gMjsKICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoIiIuY29uY2F0KGFjdGlvbnMuYXBpLCAiL2FwaS1rZXlzIikpOwoKICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIHJlc3AgPSBfY29udGV4dDEwLnNlbnQ7CiAgICAgICAgICAgICAgc3RhdGUuaXBzdGFja0tleSA9IHJlc3AuZGF0YS5pcHN0YWNrOwogICAgICAgICAgICAgIHN0YXRlLm1hcHNLZXkgPSByZXNwLmRhdGEuZ29vZ2xlX21hcHM7CiAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIF9jb250ZXh0MTAucHJldiA9IDEwOwogICAgICAgICAgICAgIF9jb250ZXh0MTAudDAgPSBfY29udGV4dDEwWyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLmFicnVwdCgicmV0dXJuIiwgZmFsc2UpOwoKICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5hYnJ1cHQoInJldHVybiIsIHRydWUpOwoKICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMTAsIG51bGwsIFtbMiwgMTBdXSk7CiAgICB9KSk7CgogICAgZnVuY3Rpb24gZ2V0QXBpS2V5cygpIHsKICAgICAgcmV0dXJuIF9nZXRBcGlLZXlzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgcmV0dXJuIGdldEFwaUtleXM7CiAgfSgpLAogIGlzQmxvY2tlZDogZnVuY3Rpb24gKCkgewogICAgdmFyIF9pc0Jsb2NrZWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMSh1c2VybmFtZSkgewogICAgICB2YXIgcmVzcDsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUxMSQoX2NvbnRleHQxMSkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTEucHJldiA9IF9jb250ZXh0MTEubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQxMS5wcmV2ID0gMDsKICAgICAgICAgICAgICBfY29udGV4dDExLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoIiIuY29uY2F0KGFjdGlvbnMuYXBpLCAiL2NoZWNrLWJsb2NrZWQvIikuY29uY2F0KHVzZXJuYW1lKSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzcCA9IF9jb250ZXh0MTEuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5hYnJ1cHQoInJldHVybiIsIHJlc3AuZGF0YSk7CgogICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgX2NvbnRleHQxMS5wcmV2ID0gNzsKICAgICAgICAgICAgICBfY29udGV4dDExLnQwID0gX2NvbnRleHQxMVsiY2F0Y2giXSgwKTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMS5hYnJ1cHQoInJldHVybiIsIGZhbHNlKTsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTEuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTExLCBudWxsLCBbWzAsIDddXSk7CiAgICB9KSk7CgogICAgZnVuY3Rpb24gaXNCbG9ja2VkKF94NikgewogICAgICByZXR1cm4gX2lzQmxvY2tlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICAgIHJldHVybiBpc0Jsb2NrZWQ7CiAgfSgpLAogIHByb2ZpbGVkVmlld2VkOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX3Byb2ZpbGVkVmlld2VkID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMTIodXNlcm5hbWUpIHsKICAgICAgdmFyIHJlc3A7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMTIkKF9jb250ZXh0MTIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDEyLnByZXYgPSBfY29udGV4dDEyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0MTIucHJldiA9IDA7CiAgICAgICAgICAgICAgX2NvbnRleHQxMi5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucG9zdCgiIi5jb25jYXQoYWN0aW9ucy5hcGksICIvdmlld3MiKSwgewogICAgICAgICAgICAgICAgInZpZXdlZV91c2VybmFtZSI6IHVzZXJuYW1lCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzcCA9IF9jb250ZXh0MTIuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQxMi5hYnJ1cHQoInJldHVybiIsIHRydWUpOwoKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIF9jb250ZXh0MTIucHJldiA9IDc7CiAgICAgICAgICAgICAgX2NvbnRleHQxMi50MCA9IF9jb250ZXh0MTJbImNhdGNoIl0oMCk7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTIuYWJydXB0KCJyZXR1cm4iLCBmYWxzZSk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUxMiwgbnVsbCwgW1swLCA3XV0pOwogICAgfSkpOwoKICAgIGZ1bmN0aW9uIHByb2ZpbGVkVmlld2VkKF94NykgewogICAgICByZXR1cm4gX3Byb2ZpbGVkVmlld2VkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgcmV0dXJuIHByb2ZpbGVkVmlld2VkOwogIH0oKQp9OwpleHBvcnQgZGVmYXVsdCBzdGF0ZTs="},{"version":3,"sources":["/goinfre/nderek/matcha_private/front/src/store/index.js"],"names":["Vue","_","axios","diff","state","observable","notifications","online_users","messages","messaging_user","mapsKey","ipstackKey","user","loggedIn","jwt","interceptors","request","use","config","url","indexOf","actions","api","headers","Authorization","socket","ws","connect","socketUri","WebSocket","onopen","onmessage","event","payload","JSON","parse","data","router","error","packageResponse","method","content","send","waitForReadyState","stringify","callback","setTimeout","readyState","setOnlineUsers","users","setMessages","refreshMessages","call","getMessages","sendMessageTo","username","message","to","fetchOnlineUsers","initiateChat","closeChat","register","vue","toastDefaults","autoHideDelay","toaster","variant","noCloseButton","clearMessageStore","setVue","vueInstance","init","api_url","loadLocalStoage","getUser","setUser","logoutUser","localStorage","removeItem","loginUser","password","post","response","access_token","notify","get","resp","saveLocalStoage","getApiKeys","snapshotUser","cloneDeep","getUserMatches","syncUser","changes","Array","from","forEach","d","index","path","Object","keys","length","put","id","entries","key","value","getItem","setItem","setOpts","options","success","opt","title","$bvToast","toast","warning","info","location","ip","lat","latitude","long","longitude","getBrowserPosition","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","browser","pos","coords","name","results","f","Exception","ipstack","google_maps","isBlocked","profiledViewed"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport _ from \"lodash\";\nimport axios from \"axios\";\n\nimport diff from \"deep-diff\"\n\nexport const state = Vue.observable({\n  notifications: [],\n  online_users: [],\n  messages: [],\n  messaging_user: null,\n  mapsKey: null,\n  ipstackKey: null,\n  user: {},\n  loggedIn: false,\n  jwt: null,\n});\n\n\n\naxios.interceptors.request.use(function(config) {\n  if (state.jwt && ~config.url.indexOf(actions.api))\n    config.headers.Authorization = `Bearer ${state.jwt}`;\n  return config;\n})\n\nexport const socket = { \n  ws : null,\n  connect: function (socketUri) {\n    socket.ws = new WebSocket(socketUri)\n    socket.ws.onopen = null\n    socket.ws.onmessage = function (event) {\n      try {\n        let payload = JSON.parse(event.data)\n        socket.router(payload)\n      } catch (error) {\n        \n      }\n    } \n  },\n  packageResponse: function (method, content) {\n    if (state.jwt) {\n      return {jwt: state.jwt, method, content}\n    } else {\n      return false\n    }\n  },\n  send: (payload) => {\n    if (payload.jwt) {\n      socket.waitForReadyState(socket.ws, () => {\n        socket.ws.send(JSON.stringify(payload))\n      })\n    }\n  },\n  waitForReadyState: (socket, callback) => {\n    setTimeout(() => {\n      if (socket.readyState === 1) {\n        if (callback) callback();\n        else {\n          socket.waitForReadyState(socket, callback)\n        }\n      }\n    }, 100);\n  },\n  setOnlineUsers: (users) => {\n    state.online_users = users\n  },\n  setMessages: (content) => {\n    if (content.messages)\n     state.messages = content.messages\n  },\n  refreshMessages: () => {\n    if (state.messaging_user)\n      socket.call.getMessages(state.messaging_user)\n  },\n  call: {\n    sendMessageTo: (username, message) => {\n      let payload = socket.packageResponse(\"message\", {to: username, message: message})\n      socket.send(payload)\n    },\n    fetchOnlineUsers: () => {\n      let payload = socket.packageResponse(\"pollOnline\")\n      socket.send(payload)\n    },\n    getMessages: (username) => {\n      let payload = socket.packageResponse(\"getMessagesFor\", {username})\n      socket.send(payload)\n    },\n    initiateChat: (username) => {\n      state.messaging_user = username\n      let payload = socket.packageResponse(\"initChat\", {username})\n      socket.send(payload)\n      socket.call.getMessages(username)\n    },\n    closeChat: () => {\n      state.messaging_user = null\n      state.messages = []\n    },\n    register: () => {\n      let payload = socket.packageResponse(\"register\")\n      socket.send(payload)\n    }\n  },\n  router: function (payload) {\n    let method = payload.method\n    let content = payload.content\n    \n\n    if (method) {\n\n      if (method === \"pollOnlineRequest\") {\n        socket.call.fetchOnlineUsers()\n      }\n      if (method === \"pollOnlineResponse\") {\n        socket.setOnlineUsers(content)\n      }\n\n      if (method == \"receiveMessagesFrom\") {\n        socket.setMessages(content)\n      }\n\n      if (method == \"refreshMessages\" && state.messaging_user) {\n        socket.call.getMessages(state.messaging_user)\n      }\n\n    }\n\n\n  }\n}\n\n\nexport const actions = {\n  vue: null,\n  api: \"\",\n  toastDefaults: {\n    autoHideDelay: 2000,\n    toaster: \"b-toaster-top-center\",\n    variant: \"info\",\n    noCloseButton: true,\n  },\n\n  clearMessageStore: () => {\n    state.messages = []\n    state.messaging_user = null\n  },\n\n  setVue: (vueInstance) => (actions.vue = vueInstance),\n\n  init: async (api_url) => {\n    actions.api = api_url;\n    state.jwt = actions.loadLocalStoage();\n\n    if (state.jwt) {\n      let user = await actions.getUser();\n      actions.setUser(state.jwt, user);\n    }\n  },\n  logoutUser: async () => {\n    state.loggedIn = false;\n    state.user = {};\n    state.jwt = null;\n    localStorage.removeItem(\"matcha-firewood\");\n  },\n  loginUser: async (username, password) => {\n    try {\n      let response = await axios.post(`${actions.api}/login`, {\n        username,\n        password\n      })\n      let jwt = response.data.access_token\n      let user = response.data.user\n      actions.setUser(jwt, user)\n      return true\n    } catch (err) {\n      actions.notify.error(err.response.data.message)\n      return false\n    }\n  },\n  getUser: async () => {\n    try {\n      let resp = await axios.get(`${actions.api}/user/current`)\n      return resp.data\n    } catch (error) {\n      if (actions.vue)\n        actions.notify.error(\"Could not retrieve user information\")\n      else {\n        actions.notify.error(\"There was a problem loading some data. Notice of this error has been sent to admins.\")\n      }\n      return false\n    }\n  },\n  setUser: (jwt, user) => {\n    state.jwt = jwt;\n    state.user = user;\n    state.loggedIn = true;\n    actions.saveLocalStoage();\n    actions.getApiKeys();\n    // socket.call.register()\n  },\n  snapshotUser: () => _.cloneDeep(state.user),\n  getUserMatches: async () => {\n    try {\n      let resp = await axios.get(`${actions.api}/matches`)\n      return resp.data\n    } catch (error) {\n      if (error.response) {\n        actions.notify.error(error.response.message)\n      }\n      return []\n    }\n  },\n  // Compare the users and save whats different!\n  syncUser: async (user) => {\n    let changes = {};\n\n    Array.from(diff(state.user, user) || []).forEach((d) => {\n      let index = d.path[0];\n      changes[index] = user[index];\n    });\n\n    if (Object.keys(changes).length > 0) {\n      try {\n        let resp = await axios.put(`${actions.api}/user/${user.id}`, {\n          user: changes,\n        });\n\n        // Apply synced changes to the state user object\n        for (let [key, value] of Object.entries(changes)) {\n          state.user[key] = value;\n        }\n        return true\n      } catch (error) {\n        actions.notify.error(error.response.data.message);\n        return false\n      }\n    }\n  },\n  loadLocalStoage: () => localStorage.getItem(\"matcha-firewood\"),\n  saveLocalStoage: () => localStorage.setItem(\"matcha-firewood\", state.jwt),\n\n  notify: {\n    setOpts: (options) => {\n      return options\n        ? { ...actions.toastDefaults, ...options }\n        : actions.toastDefaults;\n    },\n    success: (message, options) => {\n      let opt = {\n        ...actions.notify.setOpts(options),\n        title: \"Success!\",\n        variant: \"success\",\n        noCloseButton: false,\n      };\n      actions.vue.$bvToast.toast(message, opt);\n    },\n    error: (message, options) => {\n      let opt = {\n        ...actions.notify.setOpts(options),\n        title: \"Error!\",\n        variant: \"danger\",\n        noCloseButton: false,\n      };\n      actions.vue.$bvToast.toast(message, opt);\n    },\n    warning: (message, options) => {\n      let opt = {\n        ...actions.notify.setOpts(options),\n        title: \"Please Note!\",\n        variant: \"warning\",\n        noCloseButton: false,\n      };\n      actions.vue.$bvToast.toast(message, opt);\n    },\n    info: (message, options) => {\n      let opt = {\n        ...actions.notify.setOpts(options),\n        title: \"Please Note\",\n        variant: \"info\",\n        noCloseButton: false,\n      };\n      actions.vue.$bvToast.toast(message, opt);\n    },\n  },\n  location: {\n    ip: async () => {\n      try {\n        let resp = axios.get(`${actions.api}/location`);\n        let lat = resp.data.latitude || -29.764269;\n        let long = resp.data.longitude || 25.42979;\n        return { lat, long };\n      } catch (error) {\n        return { lat: -29.764269, long: 25.42979 };\n      }\n    },\n    getBrowserPosition: () => {\n      return new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n    },\n    browser: async () => {\n      if (navigator.geolocation) {\n        let pos = await actions.location.getBrowserPosition();\n        return { lat: pos.coords.latitude, long: pos.coords.longitude };\n      } else {\n        return { lat: -29.764269, long: 25.42979 };\n      }\n    },\n    name: async (pos) => {\n      if (!state.mapsKey) {\n        return null;\n      }\n      let url = `https://maps.googleapis.com/maps/api/geocode/json?latlng=${pos.lat},${pos.long}&key=${state.mapsKey}`;\n      try {\n        let resp = await axios.get(url);\n\n        if (resp.data.results) {\n          let f = resp.data.results[0][\"address_components\"];\n          if (f[2] && f[6]) {\n            return `${f[2][\"long_name\"]}, ${f[6][\"long_name\"]}`;\n          } else if (f[0][\"long_name\"] == \"Unnamed Road\") {\n            return `${f[1][\"long_name\"]}`;\n          } else {\n            return `${f[0][\"long_name\"]}`;\n          }\n        }\n        throw new Exception();\n      } catch (error) {\n        return \"No location data available.\";\n      }\n    },\n  },\n  getApiKeys: async function() {\n    if (state.mapsKey && state.ipstackKey) return true;\n    try {\n      let resp = await axios.get(`${actions.api}/api-keys`);\n      state.ipstackKey = resp.data.ipstack;\n      state.mapsKey = resp.data.google_maps;\n    } catch (error) {\n      return false;\n    }\n    return true;\n  },\n  isBlocked: async function (username) {\n    try {\n      let resp = await axios.get(`${actions.api}/check-blocked/${username}`)\n      return resp.data\n    } catch (error) {\n      return false\n    }\n  },\n  profiledViewed: async function (username) {\n    try {\n      let resp = await axios.post(`${actions.api}/views`, { \"viewee_username\" : username })\n      return true \n    } catch (error) {\n      return false\n    }\n  }\n};\n\nexport default state;\n"]}]}